// Generated by CoffeeScript 1.9.2
define(function(require, exports, module) {
  "use strict";
  var CodeMirror, Coder, beautify, mode;
  CodeMirror = require("codemirror/lib/codemirror");
  mode = require("./mode");
  beautify = require("../lib/beautify");
  Coder = (function() {
    function Coder(editor) {
      var flag, querycheck, self;
      this.editor = editor;
      this.container = this.editor.container;
      this.element = this.editor.element;
      this.event_bind();
      this.typelist = [];
      flag = 0;
      self = this;
      $.each(this.element.codes, function() {
        var code_type, code_value;
        flag++;
        code_type = this.type;
        code_value = this.value;
        self.typelist.push(code_type);
        return require(["codemirror/mode/" + mode[code_type].mode + "/" + mode[code_type].mode], (function(_this) {
          return function() {
            var code_content, codemirrorinit, menu;
            flag--;
            menu = $("<div class='mode-tab' codetype='code" + code_type + "'>" + code_type + "<div class='arrow-up '></div></div>");
            self.container.find("#mode-tabs").append(menu);
            codemirrorinit = document.createElement("textarea");
            codemirrorinit.id = "code" + code_type;
            self.container.find("#code-editor").append(codemirrorinit);
            self.editor[code_type + "_editor"] = CodeMirror.fromTextArea(self.container.find("#" + codemirrorinit.id)[0], {
              theme: "monokai",
              lineNumbers: true,
              matchBrackets: true,
              mode: "" + mode[code_type].type
            });
            self.container.find("#code" + code_type).next().prepend("<div class='remind'>" + code_type + "</div>");
            code_content = _this.value;
            code_content = self.code_format(code_type, code_content);
            if (code_type === "js" || code_type === "css" || code_type === "html") {
              self.editor[code_type + "_editor"].on("change", function() {
                return self.editor.ifr.refresh();
              });
            }
            return self.editor[code_type + "_editor"].doc.setValue(code_content);
          };
        })(this));
      });
      querycheck = setInterval((function(_this) {
        return function() {
          var i, j, len, ref;
          if (flag !== 0) {
            return;
          }
          if (_this.editor.ifr.ifr === null) {
            _this.editor.ifr.remove();
          }
          _this.typelist = _this.typelist.reverse();
          ref = _this.typelist;
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            _this.fixlist(i);
          }
          _this.container.find(".mode-tab").eq(0).trigger("click");
          return clearInterval(querycheck);
        };
      })(this), 100);
      return;
    }

    Coder.prototype.fixlist = function(i) {
      this.container.find("div[codetype=code" + i + "]").prependTo(this.container.find("#mode-tabs"));
      this.container.find("#code" + i).next().prependTo(this.container.find("#code-editor"));
      return this.container.find("#code" + i).prependTo(this.container.find("#code-editor"));
    };

    Coder.prototype.code_format = function(type, content) {
      content = content.trim();
      switch (type) {
        case "html":
          content = beautify.html_beautify(content);
          break;
        case "css":
          content = beautify.css_beautify(content);
          break;
        case "js":
          content = beautify.js_beautify(content);
      }
      return content;
    };

    Coder.prototype.event_bind = function() {
      var self;
      self = this;
      this.container.find("#mode-tabs").delegate("div", "click", function() {
        var toshow;
        if ($(this).hasClass("active")) {
          return;
        }
        self.container.find(".mode-tab").removeClass("active");
        $(this).addClass("active");
        self.container.find(".CodeMirror").removeClass("expansiondown");
        self.container.find(".CodeMirror").hide();
        toshow = $(this).attr("codetype");
        return self.container.find("#" + toshow).next().show();
      });
      this.container.find(".mode").on("click", (function(_this) {
        return function() {
          _this.element.layout++;
          return self.editor.layout.set_layout();
        };
      })(this));
      this.container.find(".login").on("click", function() {
        if (self.container.find(".type").hasClass("typedown")) {
          self.container.find(".type .row").animate({
            "top": "10%"
          }, 300);
          self.container.find(".signinput").animate({
            "margin-top": "-70%"
          }, 500).addClass("show");
          self.container.find(".signupput").animate({
            "margin-top": "-70%",
            "margin-left": "105%"
          }, 0);
          return self.container.find(".type").removeClass("typedown");
        } else {
          if (self.container.find(".signinput").hasClass("show")) {
            self.container.find(".type .row").animate({
              "top": "50%"
            }, 500);
            self.container.find(".signinput").animate({
              "margin-top": "0"
            }, 500).removeClass("show");
            self.container.find(".signupput").animate({
              "margin-top": "0",
              "margin-left": "5%"
            }, 0);
            return self.container.find(".type").addClass("typedown");
          } else {
            self.container.find(".signupput").animate({
              "margin-left": "105%"
            }, 500).removeClass("show");
            return self.container.find(".signinput").animate({
              "margin-left": "5%"
            }, 500).addClass("show");
          }
        }
      });
      this.container.find(".signup").on("click", function() {
        if (self.container.find(".type").hasClass("typedown")) {
          self.container.find(".type .row").animate({
            "top": "10%"
          }, 300);
          self.container.find(".signupput").animate({
            "margin-top": "-70%"
          }, 500).addClass("show");
          self.container.find(".signinput").animate({
            "margin-top": "-70%",
            "margin-left": "-95%"
          }, 0);
          return self.container.find(".type").removeClass("typedown");
        } else {
          if (self.container.find(".signupput").hasClass("show")) {
            self.container.find(".type .row").animate({
              "top": "50%"
            }, 500);
            self.container.find(".signupput").animate({
              "margin-top": "0"
            }, 500).removeClass("show");
            self.container.find(".signinput").animate({
              "margin-top": "0",
              "margin-left": "5%"
            }, 0);
            return self.container.find(".type").addClass("typedown");
          } else {
            self.container.find(".signupput").animate({
              "margin-left": "5%"
            }, 500).addClass("show");
            return self.container.find(".signinput").animate({
              "margin-left": "-95%"
            }, 500).removeClass("show");
          }
        }
      });
      this.container.find("#signin").on("click", function() {
        var email, password;
        email = self.container.find("input[type ='mail']").val();
        password = self.container.find("input[type ='password']").val();
        return self.editor.service.authService.login(email, password, function(error, data) {
          if (error !== null) {
            return console.log(error);
          } else {
            return console.log(data);
          }
        });
      });
      this.container.find("#signup").on("click", function() {
        var email, password;
        email = self.container.find("input[type = 'mailsignup']").val();
        password = self.container.find("input[type = 'passwordsignup']").val();
        return self.editor.service.authService.register(email, password, function(error, data) {
          if (error !== null) {
            return console.log(error);
          } else {
            return self.editor.service.authService.login(email, password, function(error, data) {
              if (error !== null) {
                return console.log(error);
              } else {
                return console.log(data);
              }
            });
          }
        });
      });
      this.container.find(".nameless").on("click", function() {
        return self.editor.service.authService.anonymouslogin(function(error, data) {
          if (error !== null) {
            return console.log(error);
          } else {
            return console.log(data);
          }
        });
      });
      this.container.find("#forget").on("click", function() {
        var email;
        email = self.container.find("input[type ='mail']").val();
        return self.editor.service.authService.resetPassword(email, function(error, data) {
          return console.log(error);
        });
      });
      this.container.find(".facebook").on("click", function() {
        return self.editor.service.authService.thirdpartylogin("facebook", function(error, data) {
          return console.log(error);
        });
      });
      this.container.find(".github").on("click", function() {
        return self.editor.service.authService.thirdpartylogin("github", function(error, data) {
          return console.log(error);
        });
      });
      this.container.find(".twitter").on("click", function() {
        return self.editor.service.authService.thirdpartylogin("twitter", function(error, data) {
          return console.log(error);
        });
      });
      return this.container.find(".google").on("click", function() {
        return self.editor.service.authService.thirdpartylogin("google", function(error, data) {
          return console.log(error);
        });
      });
    };

    return Coder;

  })();
  return module.exports = Coder;
});
