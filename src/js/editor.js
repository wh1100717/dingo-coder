// Generated by CoffeeScript 1.9.2
define(function(require, exports, module) {
  "use strict";
  var CodeMirror, Editor, html, js;
  CodeMirror = require("codemirror/lib/codemirror");
  require("codemirror/mode/htmlmixed/htmlmixed");
  require("codemirror/mode/css/css");
  require("codemirror/mode/javascript/javascript");
  html = require("../module/prettify/html");
  js = require("../module/prettify/js");
  window.beautify = require("../module/beautify/index");
  Editor = (function() {
    function Editor(container, attrs) {
      this.container = container;
      this.attrs = attrs;
      this.container = $(this.container);
      this.ifr_init();
      this.editor_init();
      this.lightdom_init();
      this.event_bind();
    }

    Editor.prototype.ifr_init = function() {
      this.ifr = document.createElement("iframe");
      this.ifr.id = "ifr_coder";
      this.ifr.scrolling = "no";
      this.ifr.setAttribute("class", "renderer coder");
      this.container.find("#renderer-container").append(this.ifr);
    };

    Editor.prototype.ifr_refresh = function() {
      var doc, script, style;
      try {
        doc = this.html_editor.doc.getValue().trim();
        if (doc === "") {
          doc = "<div></div>";
        }
        this.ifr.contentWindow.document.close();
        this.ifr.contentWindow.document.write(doc);
        style = document.createElement("style");
        script = document.createElement("script");
        style.textContent = this.css_editor.doc.getValue();
        script.text = this.js_editor.doc.getValue();
        this.ifr.contentWindow.document.head.appendChild(style);
        this.ifr.contentWindow.document.body.appendChild(script);
      } catch (_error) {}
    };

    Editor.prototype.editor_init = function() {
      this.js_editor = CodeMirror.fromTextArea(this.container.find("#codejs")[0], {
        theme: "monokai",
        lineNumbers: true,
        matchBrackets: true,
        mode: "text/javascript"
      });
      this.css_editor = CodeMirror.fromTextArea(this.container.find("#codecss")[0], {
        theme: "monokai",
        lineNumbers: true,
        matchBrackets: true,
        mode: "text/css"
      });
      this.html_editor = CodeMirror.fromTextArea(this.container.find("#codehtml")[0], {
        theme: "monokai",
        lineNumbers: true,
        matchBrackets: true,
        mode: "text/html"
      });
    };

    Editor.prototype.code_format = function(type, content) {
      content = content.trim();
      switch (type) {
        case "html":
          return beautify.html_beautify(content);
        case "css":
          return beautify.css_beautify(content);
        case "js":
          return beautify.js_beautify(content);
      }
    };

    Editor.prototype.lightdom_init = function() {
      var self;
      self = this;
      window.codeList = $("<div>" + this.attrs.innerHTML + "</div>");
      return codeList.find("textarea").each(function() {
        var code_content, code_type;
        code_type = $(this).attr("code");
        code_content = $(this).val();
        code_content = self.code_format(code_type, code_content);
        return window.editor = self[code_type + "_editor"];
      });
    };

    Editor.prototype.set_editor = function(type, val) {
      return this[type + "_editor"].getDoc().setValue(val);
    };

    Editor.prototype.set_layout = function() {
      this.container.find(".CodeMirror").removeClass("expansiondown expansionup");
      this.container.find("#mode-tabs").removeClass("tabup tabdown");
      switch (this.attrs.layout) {
        case 1:
          this.container.find("#mode-tabs").removeClass("tabup").addClass("tabdown");
          this.container.find(".remind").remove();
          this.container.find(".CodeMirror").removeClass("expansionup").addClass("expansiondown");
          this.container.find(".mode-tab").removeClass("active");
          this.container.find(".mode-tab").eq(0).addClass("active");
          break;
        case 2:
          this.container.find("#mode-tabs #file-dropdown-toggle #file-dropdown").hide();
          this.container.find(".CodeMirror").show().addClass("expansionup");
          this.container.find("#mode-tabs").addClass("tabup");
          this.container.find(".CodeMirror").eq(0).prepend("<div class='remind'>HTML</div>");
          this.container.find(".CodeMirror").eq(1).prepend("<div class='remind'>CSS</div>");
          this.container.find(".CodeMirror").eq(2).prepend("<div class='remind'>JS</div>");
          break;
        default:
          this.attrs.layout = 1;
          this.set_layout();
      }
    };

    Editor.prototype.event_bind = function() {
      var self;
      self = this;
      this.container.find(".mode-tab").on("click", function() {
        var index;
        if ($(this).hasClass("active")) {
          return;
        }
        index = self.container.find(".mode-tab").index(this);
        self.container.find(".mode-tab").removeClass("active");
        $(this).addClass("active");
        self.container.find(".CodeMirror").removeClass("expansiondown");
        self.container.find(".CodeMirror").hide();
        return self.container.find(".CodeMirror").eq(index).show();
      });
      this.css_editor.on("change", (function(_this) {
        return function() {
          return _this.ifr_refresh();
        };
      })(this));
      this.html_editor.on("change", (function(_this) {
        return function() {
          return _this.ifr_refresh();
        };
      })(this));
      this.js_editor.on("change", (function(_this) {
        return function() {
          clearTimeout(_this.timeout);
          return _this.timeout = setTimeout(function() {
            return _this.ifr_refresh();
          }, 700);
        };
      })(this));
      this.container.find("#toggle-full-screen").click(function() {
        if ($(this).hasClass("full-screen-enabled")) {
          self.exit_fullscreen();
        } else {
          self.enter_fullscreen();
        }
        return $(this).toggleClass("full-screen-enabled");
      });
      this.container.find(".iframeread").click(function() {
        if (!$(this).hasClass("active")) {
          $(this).addClass("active");
          self.container.find(".codepanel").removeClass("narrow").addClass("expansionleft");
          return self.container.find(".renderpanel").removeClass("expansion").addClass("narrowleft");
        } else if (self.container.find(".coderead").hasClass("active")) {
          $(this).removeClass("active");
          self.container.find(".codepanel").removeClass("expansionleft narrowleft").addClass('narrow');
          return self.container.find(".renderpanel").removeClass("narrowleft expansionleft").addClass('expansion');
        } else {
          self.container.find(".coderead").click();
          return setTimeout(function() {
            return self.container.find(".iframeread").click();
          }, 500);
        }
      });
      this.container.find(".coderead").on("click", function() {
        if (!$(this).hasClass("active")) {
          $(this).addClass("active");
          self.container.find(".renderpanel").removeClass("narrow").addClass("expansionleft");
          return self.container.find(".codepanel").removeClass("expansion").addClass("narrowleft");
        } else if (self.container.find(".iframeread").hasClass("active")) {
          $(this).removeClass("active");
          self.container.find(".renderpanel").removeClass("expansionleft narrowleft").addClass("narrow");
          return self.container.find(".codepanel").removeClass("narrowleft expansionleft").addClass("expansion");
        } else {
          self.container.find(".iframeread").click();
          return setTimeout(function() {
            return self.container.find(".coderead").click();
          }, 500);
        }
      });
      return this.container.find(".mode").on("click", (function(_this) {
        return function() {
          return _this.attrs.layout++;
        };
      })(this));
    };

    Editor.prototype.enter_fullscreen = function() {
      var base, base1, base2, base3;
      if (typeof (base = this.container[0]).requestFullscreen === "function") {
        base.requestFullscreen();
      }
      if (typeof (base1 = this.container[0]).msRequestFullscreen === "function") {
        base1.msRequestFullscreen();
      }
      if (typeof (base2 = this.container[0]).mozRequestFullScreen === "function") {
        base2.mozRequestFullScreen();
      }
      if (typeof (base3 = this.container[0]).webkitRequestFullscreen === "function") {
        base3.webkitRequestFullscreen();
      }
    };

    Editor.prototype.exit_fullscreen = function() {
      if (typeof document.exitFullscreen === "function") {
        document.exitFullscreen();
      }
      if (typeof document.msExitFullscreen === "function") {
        document.msExitFullscreen();
      }
      if (typeof document.mozCancelFullScreen === "function") {
        document.mozCancelFullScreen();
      }
      if (typeof document.webkitExitFullscreen === "function") {
        document.webkitExitFullscreen();
      }
    };

    return Editor;

  })();
  return module.exports = Editor;
});
